let currentSearchTimeout = null;
let editingId = null;
let currentUserEmail = '';
let visibleLanguages = ['russian', 'english', 'german', 'french', 'spanish', 'polish', 'kazakh', 'italian', 'belarusian', 'ukrainian', 'dutch', 'kyrgyz', 'uzbek', 'armenian'];
const allLanguages = [
  { id: 'russian', name: '–†—É—Å—Å–∫–∏–π' },
  { id: 'english', name: '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π' },
  { id: 'german', name: '–ù–µ–º–µ—Ü–∫–∏–π' },
  { id: 'french', name: '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π' },
  { id: 'spanish', name: '–ò—Å–ø–∞–Ω—Å–∫–∏–π' },
  { id: 'polish', name: '–ü–æ–ª—å—Å–∫–∏–π' },
  { id: 'kazakh', name: '–ö–∞–∑–∞—Ö—Å–∫–∏–π' },
  { id: 'italian', name: '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π' },
  { id: 'belarusian', name: '–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π' },
  { id: 'ukrainian', name: '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π' },
  { id: 'dutch', name: '–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π' },
  { id: 'kyrgyz', name: '–ö–∏—Ä–≥–∏–∑—Å–∫–∏–π' },
  { id: 'uzbek', name: '–£–∑–±–µ–∫—Å–∫–∏–π' },
  { id: 'armenian', name: '–ê—Ä–º—è–Ω—Å–∫–∏–π' }
];

// –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ—á—Ç
const ALLOWED_EMAILS = [
  'mantsurova_e@panna.ru',
  'kulyabina_v@panna.ru', 
  'semenchenko_d@panna.ru',
  'pyatnitskaya_n@panna.ru',
  'tolstokorova_m@panna.ru'
];

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ localStorage
function saveSettings() {
  localStorage.setItem('visibleLanguages', JSON.stringify(visibleLanguages));
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ localStorage
function loadSettings() {
  const saved = localStorage.getItem('visibleLanguages');
  if (saved) {
    visibleLanguages = JSON.parse(saved);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ email
function requestEmail() {
  const email = prompt('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:');
  if (email) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º email –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    fetch('/api/check-auth', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-user-email': email
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        currentUserEmail = email;
        localStorage.setItem('userEmail', email);
        updateUserDisplay();
        alert('–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω!');
      } else {
        alert('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í–∞—à email –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö.');
        requestEmail(); // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–Ω–æ–≤–∞
      }
    })
    .catch(error => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞');
    });
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
function updateUserDisplay() {
  const userInfo = document.getElementById('userInfo');
  const currentUserSpan = document.getElementById('currentUser');
  
  if (currentUserEmail) {
    userInfo.style.display = 'block';
    currentUserSpan.textContent = currentUserEmail;
  } else {
    userInfo.style.display = 'none';
  }
}

// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
function logout() {
  currentUserEmail = '';
  localStorage.removeItem('userEmail');
  updateUserDisplay();
  requestEmail();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —è–∑—ã–∫–æ–≤
function initLanguageFilters() {
  const filtersContainer = document.getElementById('languageFilters');
  filtersContainer.innerHTML = '';
  
  allLanguages.forEach(lang => {
    const isChecked = visibleLanguages.includes(lang.id);
    
    const filterDiv = document.createElement('div');
    filterDiv.className = 'language-filter';
    filterDiv.innerHTML = `
      <input type="checkbox" id="filter-${lang.id}" name="language" 
             value="${lang.id}" ${isChecked ? 'checked' : ''} 
             onchange="applyLanguageFilter()">
      <label for="filter-${lang.id}">${lang.name}</label>
    `;
    
    filtersContainer.appendChild(filterDiv);
  });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
function initAddForm() {
  const formContainer = document.getElementById('addForm');
  formContainer.innerHTML = '';
  
  // –†—É—Å—Å–∫–∏–π –≤—Å–µ–≥–¥–∞ –≤–∏–¥–µ–Ω
  formContainer.innerHTML += `
    <div class="form-group">
      <label for="russianInput">–†—É—Å—Å–∫–∏–π *</label>
      <input type="text" id="russianInput" required>
    </div>
  `;
  
  // –û—Å—Ç–∞–ª—å–Ω—ã–µ —è–∑—ã–∫–∏
  allLanguages.filter(lang => lang.id !== 'russian').forEach(lang => {
    const isVisible = visibleLanguages.includes(lang.id);
    formContainer.innerHTML += `
      <div class="form-group" id="${lang.id}Container" style="display: ${isVisible ? 'block' : 'none'}">
        <label for="${lang.id}Input">${lang.name}</label>
        <input type="text" id="${lang.id}Input">
      </div>
    `;
  });
}

async function searchTranslations() {
  const searchTerm = document.getElementById('searchInput').value.trim();
  
  if (currentSearchTimeout) {
    clearTimeout(currentSearchTimeout);
  }
  
  currentSearchTimeout = setTimeout(async () => {
    try {
      const response = await fetch(`/api/translations?search=${encodeURIComponent(searchTerm)}`);
      const translations = await response.json();
      displayResults(translations);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
      document.getElementById('results').innerHTML = `
        <div class="error">–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤</div>
      `;
    }
  }, 300);
}

function displayResults(translations) {
  const resultsDiv = document.getElementById('results');
  
  if (translations.length === 0) {
    resultsDiv.innerHTML = '<div class="loading">–ü–µ—Ä–µ–≤–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
    return;
  }
  
  let html = `
    <table>
      <thead>
        <tr>
          <th>–†—É—Å—Å–∫–∏–π</th>
  `;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–¥–∏–º—ã—Ö —è–∑—ã–∫–æ–≤
  allLanguages.forEach(lang => {
    if (lang.id !== 'russian' && visibleLanguages.includes(lang.id)) {
      html += `<th>${lang.name}</th>`;
    }
  });
  
  html += `
          <th>–î–µ–π—Å—Ç–≤–∏—è</th>
        </tr>
      </thead>
      <tbody>
  `;
  
  translations.forEach(translation => {
    html += `
      <tr>
        <td>${escapeHtml(translation.russian)}</td>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —è—á–µ–π–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–¥–∏–º—ã—Ö —è–∑—ã–∫–æ–≤
    allLanguages.forEach(lang => {
      if (lang.id !== 'russian' && visibleLanguages.includes(lang.id)) {
        html += `<td>${escapeHtml(translation[lang.id] || '-')}</td>`;
      }
    });
    
    html += `
        <td>
          <button class="btn-edit" onclick="startEdit(${translation.id})">
            ‚úèÔ∏è
          </button>
          <button class="btn-delete" onclick="deleteTranslation(${translation.id})">
            üóëÔ∏è
          </button>
        </td>
      </tr>
    `;
  });
  
  html += `
      </tbody>
    </table>
  `;
  
  resultsDiv.innerHTML = html;
}

function applyLanguageFilter() {
  const checkboxes = document.querySelectorAll('input[name="language"]:checked');
  visibleLanguages = Array.from(checkboxes).map(cb => cb.value);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  saveSettings();
  
  // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
  searchTranslations();
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  initAddForm();
}

function startEdit(id) {
  if (!currentUserEmail) {
    requestEmail();
    return;
  }
  
  editingId = id;
  
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
  const password = prompt('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  if (password !== 'Proizv_23!') {
    alert('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!');
    return;
  }
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  fetch(`/api/translations/${id}`, {
    headers: {
      'x-user-email': currentUserEmail
    }
  })
    .then(response => response.json())
    .then(translation => {
      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏
      document.getElementById('russianInput').value = translation.russian || '';
      allLanguages.forEach(lang => {
        if (lang.id !== 'russian') {
          const input = document.getElementById(`${lang.id}Input`);
          if (input) {
            input.value = translation[lang.id] || '';
          }
        }
      });
      
      // –ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
      const addButton = document.querySelector('.btn-primary');
      addButton.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
      addButton.onclick = saveEdit;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
      const actionsDiv = document.querySelector('.form-actions');
      if (!document.querySelector('.btn-cancel')) {
        actionsDiv.innerHTML += `
          <button class="btn btn-danger btn-cancel" onclick="cancelEdit()">
            –û—Ç–º–µ–Ω–∞
          </button>
        `;
      }
    })
    .catch(error => {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞:', error);
      alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞');
    });
}

function saveEdit() {
  if (!currentUserEmail) {
    requestEmail();
    return;
  }
  
  const password = prompt('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:');
  if (password !== 'Proizv_23!') {
    alert('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!');
    return;
  }
  
  const translationData = {
    russian: document.getElementById('russianInput').value.trim()
  };
  
  allLanguages.forEach(lang => {
    if (lang.id !== 'russian') {
      const input = document.getElementById(`${lang.id}Input`);
      if (input) {
        translationData[lang.id] = input.value.trim();
      }
    }
  });
  
  fetch(`/api/translations/${editingId}`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
      'x-password': password,
      'x-user-email': currentUserEmail
    },
    body: JSON.stringify(translationData)
  })
  .then(response => response.json())
  .then(data => {
    if (data.changes > 0) {
      alert('–ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
      cancelEdit();
      searchTranslations();
    } else {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞');
    }
  })
  .catch(error => {
    console.error('–û—à–∏–±–∫–∞:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞');
  });
}

function cancelEdit() {
  editingId = null;
  
  // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
  document.getElementById('russianInput').value = '';
  allLanguages.forEach(lang => {
    if (lang.id !== 'russian') {
      const input = document.getElementById(`${lang.id}Input`);
      if (input) {
        input.value = '';
      }
    }
  });
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  const addButton = document.querySelector('.btn-primary');
  addButton.textContent = '–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥';
  addButton.onclick = addTranslation;
  
  // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
  const cancelButton = document.querySelector('.btn-cancel');
  if (cancelButton) {
    cancelButton.remove();
  }
}

function addTranslation() {
  const translationData = {
    russian: document.getElementById('russianInput').value.trim()
  };
  
  if (!translationData.russian) {
    alert('–†—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!');
    return;
  }
  
  allLanguages.forEach(lang => {
    if (lang.id !== 'russian') {
      const input = document.getElementById(`${lang.id}Input`);
      if (input) {
        translationData[lang.id] = input.value.trim();
      }
    }
  });
  
  fetch('/api/translations', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(translationData)
  })
  .then(response => response.json())
  .then(data => {
    if (data.id) {
      alert('–ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      document.getElementById('russianInput').value = '';
      allLanguages.forEach(lang => {
        if (lang.id !== 'russian') {
          const input = document.getElementById(`${lang.id}Input`);
          if (input) {
            input.value = '';
          }
        }
      });
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      searchTranslations();
    } else {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞');
    }
  })
  .catch(error => {
    console.error('–û—à–∏–±–∫–∞:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞');
  });
}

function deleteTranslation(id) {
  if (!currentUserEmail) {
    requestEmail();
    return;
  }
  
  const password = prompt('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:');
  if (password !== 'Proizv_23!') {
    alert('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!');
    return;
  }
  
  if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–µ—Ä–µ–≤–æ–¥?')) {
    return;
  }
  
  fetch(`/api/translations/${id}`, {
    method: 'DELETE',
    headers: {
      'x-password': password,
      'x-user-email': currentUserEmail
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.changes > 0) {
      alert('–ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
      searchTranslations();
    } else {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞');
    }
  })
  .catch(error => {
    console.error('–û—à–∏–±–∫–∞:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞');
  });
}

function escapeHtml(text) {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π email
  const savedEmail = localStorage.getItem('userEmail');
  if (savedEmail && ALLOWED_EMAILS.includes(savedEmail.toLowerCase())) {
    currentUserEmail = savedEmail;
    updateUserDisplay();
  } else {
    requestEmail();
  }
  
  loadSettings();
  initLanguageFilters();
  initAddForm();
  searchTranslations();
});
