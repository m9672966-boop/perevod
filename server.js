// server.js
const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const csv = require('csv-parser');
const fetch = require('node-fetch');
const fs = require('fs');

const app = express();
const GITHUB_CSV_URL = 'https://raw.githubusercontent.com/–í–ê–®_USERNAME/–í–ê–®_–†–ï–ü–û–ó–ò–¢–û–†–ò–ô/main/translations.csv';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ CSV –∏–∑ GitHub —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º ;
async function importTranslationsFromGitHub() {
  try {
    console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ GitHub...');
    
    const response = await fetch(GITHUB_CSV_URL);
    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Ñ–∞–π–ª–∞');
    
    const csvData = await response.text();
    const lines = csvData.split('\n').filter(line => line.trim() && !line.startsWith('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π') && !line.startsWith('–ò–≥–ª—ã'));
    
    let importedCount = 0;
    
    for (const line of lines) {
      const values = line.split(';').map(val => val.trim());
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ —Ä—É—Å—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
      if (values.length < 15 || !values[2]) continue;
      
      db.run(`
        INSERT OR IGNORE INTO translations (
          russian, english, german, french, spanish,
          polish, kazakh, italian, belarusian, ukrainian,
          dutch, kyrgyz, uzbek, armenian
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          values[2] || '',  // RU: —Ä—É—Å—Å–∫–∏–π
          values[3] || '',  // EN: –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
          values[6] || '',  // DE: –Ω–µ–º–µ—Ü–∫–∏–π
          values[7] || '',  // FR: —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π
          values[8] || '',  // ES: –∏—Å–ø–∞–Ω—Å–∫–∏–π
          values[4] || '',  // PL: –ø–æ–ª—å—Å–∫–∏–π
          values[5] || '',  // KZ: –∫–∞–∑–∞—Ö—Å–∫–∏–π
          values[9] || '',  // IT: –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π
          values[10] || '', // BY: –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π
          values[11] || '', // UA: —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π
          values[12] || '', // NL: –≥–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π
          values[13] || '', // KG: –∫–∏—Ä–≥–∏–∑—Å–∫–∏–π
          values[14] || '', // UZ: —É–∑–±–µ–∫—Å–∫–∏–π
          values[15] || ''  // –ê—Ä–º—è–Ω—Å–∫–∏–π
        ],
        function(err) {
          if (err) {
            console.error('–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏:', err);
          } else {
            importedCount++;
          }
        }
      );
    }
    
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedCount} –ø–µ—Ä–µ–≤–æ–¥–æ–≤`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db.serialize(() => {
  db.run(`
    CREATE TABLE IF NOT EXISTS translations (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      russian TEXT NOT NULL UNIQUE,
      english TEXT,
      german TEXT,
      french TEXT,
      spanish TEXT,
      polish TEXT,
      kazakh TEXT,
      italian TEXT,
      belarusian TEXT,
      ukrainian TEXT,
      dutch TEXT,
      kyrgyz TEXT,
      uzbek TEXT,
      armenian TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  db.get("SELECT COUNT(*) as count FROM translations", (err, row) => {
    if (err || row.count === 0) {
      setTimeout(importTranslationsFromGitHub, 1000);
    }
  });
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
app.post('/api/refresh-translations', async (req, res) => {
  try {
    db.run('DELETE FROM translations', async (err) => {
      if (err) {
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã' });
      }
      await importTranslationsFromGitHub();
      res.json({ message: '–ü–µ—Ä–µ–≤–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ GitHub' });
    });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' });
  }
});

// ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Å–µ—Ä–≤–µ—Ä–∞
