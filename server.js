let currentSearchTimeout = null;
let editingId = null;

async function searchTranslations() {
  const searchTerm = document.getElementById('searchInput').value.trim();
  
  if (currentSearchTimeout) {
    clearTimeout(currentSearchTimeout);
  }
  
  currentSearchTimeout = setTimeout(async () => {
    try {
      const response = await fetch(`/api/translations?search=${encodeURIComponent(searchTerm)}`);
      const translations = await response.json();
      displayResults(translations);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
      document.getElementById('results').innerHTML = `
        <div class="error">–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤</div>
      `;
    }
  }, 300);
}

function displayResults(translations) {
  const resultsDiv = document.getElementById('results');
  
  if (translations.length === 0) {
    resultsDiv.innerHTML = '<div class="loading">–ü–µ—Ä–µ–≤–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
    return;
  }
  
  let html = `
    <table>
      <thead>
        <tr>
          <th>–†—É—Å—Å–∫–∏–π</th>
          <th>–ê–Ω–≥–ª–∏–π—Å–∫–∏–π</th>
          <th>–ù–µ–º–µ—Ü–∫–∏–π</th>
          <th>–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π</th>
          <th>–ò—Å–ø–∞–Ω—Å–∫–∏–π</th>
          <th>–ü–æ–ª—å—Å–∫–∏–π</th>
          <th>–ö–∞–∑–∞—Ö—Å–∫–∏–π</th>
          <th>–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π</th>
          <th>–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π</th>
          <th>–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π</th>
          <th>–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π</th>
          <th>–ö–∏—Ä–≥–∏–∑—Å–∫–∏–π</th>
          <th>–£–∑–±–µ–∫—Å–∫–∏–π</th>
          <th>–ê—Ä–º—è–Ω—Å–∫–∏–π</th>
          <th>–î–µ–π—Å—Ç–≤–∏—è</th>
        </tr>
      </thead>
      <tbody>
  `;
  
  translations.forEach(translation => {
    html += `
      <tr>
        <td>${escapeHtml(translation.russian)}</td>
        <td>${escapeHtml(translation.english || '-')}</td>
        <td>${escapeHtml(translation.german || '-')}</td>
        <td>${escapeHtml(translation.french || '-')}</td>
        <td>${escapeHtml(translation.spanish || '-')}</td>
        <td>${escapeHtml(translation.polish || '-')}</td>
        <td>${escapeHtml(translation.kazakh || '-')}</td>
        <td>${escapeHtml(translation.italian || '-')}</td>
        <td>${escapeHtml(translation.belarusian || '-')}</td>
        <td>${escapeHtml(translation.ukrainian || '-')}</td>
        <td>${escapeHtml(translation.dutch || '-')}</td>
        <td>${escapeHtml(translation.kyrgyz || '-')}</td>
        <td>${escapeHtml(translation.uzbek || '-')}</td>
        <td>${escapeHtml(translation.armenian || '-')}</td>
        <td>
          <button class="edit" onclick="startEdit(${translation.id})">
            ‚úèÔ∏è
          </button>
          <button class="delete" onclick="deleteTranslation(${translation.id})">
            üóëÔ∏è
          </button>
        </td>
      </tr>
    `;
  });
  
  html += `
      </tbody>
    </table>
  `;
  
  resultsDiv.innerHTML = html;
}

function startEdit(id) {
  editingId = id;
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  fetch(`/api/translations/${id}`)
    .then(response => response.json())
    .then(translation => {
      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏
      document.getElementById('russianInput').value = translation.russian || '';
      document.getElementById('englishInput').value = translation.english || '';
      document.getElementById('germanInput').value = translation.german || '';
      document.getElementById('frenchInput').value = translation.french || '';
      document.getElementById('spanishInput').value = translation.spanish || '';
      document.getElementById('polishInput').value = translation.polish || '';
      document.getElementById('kazakhInput').value = translation.kazakh || '';
      document.getElementById('italianInput').value = translation.italian || '';
      document.getElementById('belarusianInput').value = translation.belarusian || '';
      document.getElementById('ukrainianInput').value = translation.ukrainian || '';
      document.getElementById('dutchInput').value = translation.dutch || '';
      document.getElementById('kyrgyzInput').value = translation.kyrgyz || '';
      document.getElementById('uzbekInput').value = translation.uzbek || '';
      document.getElementById('armenianInput').value = translation.armenian || '';
      
      // –ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
      const addButton = document.querySelector('.add-section button');
      addButton.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
      addButton.onclick = updateTranslation;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
      if (!document.getElementById('cancelButton')) {
        const cancelButton = document.createElement('button');
        cancelButton.id = 'cancelButton';
        cancelButton.textContent = '–û—Ç–º–µ–Ω–∞';
        cancelButton.onclick = cancelEdit;
        cancelButton.style.marginLeft = '10px';
        cancelButton.style.background = '#ff4757';
        addButton.parentNode.appendChild(cancelButton);
      }
      
      // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ñ–æ—Ä–º–µ
      document.querySelector('.add-section').scrollIntoView({ behavior: 'smooth' });
    })
    .catch(error => {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞:', error);
      alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    });
}

function cancelEdit() {
  editingId = null;
  clearForm();
  const addButton = document.querySelector('.add-section button');
  addButton.textContent = '–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥';
  addButton.onclick = addTranslation;
  
  // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
  const cancelButton = document.getElementById('cancelButton');
  if (cancelButton) {
    cancelButton.remove();
  }
}

async function updateTranslation() {
  const russian = document.getElementById('russianInput').value.trim();
  const english = document.getElementById('englishInput').value.trim();
  const german = document.getElementById('germanInput').value.trim();
  const french = document.getElementById('frenchInput').value.trim();
  const spanish = document.getElementById('spanishInput').value.trim();
  const polish = document.getElementById('polishInput').value.trim();
  const kazakh = document.getElementById('kazakhInput').value.trim();
  const italian = document.getElementById('italianInput').value.trim();
  const belarusian = document.getElementById('belarusianInput').value.trim();
  const ukrainian = document.getElementById('ukrainianInput').value.trim();
  const dutch = document.getElementById('dutchInput').value.trim();
  const kyrgyz = document.getElementById('kyrgyzInput').value.trim();
  const uzbek = document.getElementById('uzbekInput').value.trim();
  const armenian = document.getElementById('armenianInput').value.trim();
  
  if (!russian) {
    alert('–ü–æ–ª–µ "–†—É—Å—Å–∫–∏–π" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
    return;
  }
  
  try {
    const response = await fetch(`/api/translations/${editingId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        russian,
        english: english || null,
        german: german || null,
        french: french || null,
        spanish: spanish || null,
        polish: polish || null,
        kazakh: kazakh || null,
        italian: italian || null,
        belarusian: belarusian || null,
        ukrainian: ukrainian || null,
        dutch: dutch || null,
        kyrgyz: kyrgyz || null,
        uzbek: uzbek || null,
        armenian: armenian || null
      })
    });
    
    if (response.ok) {
      cancelEdit();
      searchTranslations();
      alert('–ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
    } else {
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞');
  }
}

async function addTranslation() {
  const russian = document.getElementById('russianInput').value.trim();
  const english = document.getElementById('englishInput').value.trim();
  const german = document.getElementById('germanInput').value.trim();
  const french = document.getElementById('frenchInput').value.trim();
  const spanish = document.getElementById('spanishInput').value.trim();
  const polish = document.getElementById('polishInput').value.trim();
  const kazakh = document.getElementById('kazakhInput').value.trim();
  const italian = document.getElementById('italianInput').value.trim();
  const belarusian = document.getElementById('belarusianInput').value.trim();
  const ukrainian = document.getElementById('ukrainianInput').value.trim();
  const dutch = document.getElementById('dutchInput').value.trim();
  const kyrgyz = document.getElementById('kyrgyzInput').value.trim();
  const uzbek = document.getElementById('uzbekInput').value.trim();
  const armenian = document.getElementById('armenianInput').value.trim();
  
  if (!russian) {
    alert('–ü–æ–ª–µ "–†—É—Å—Å–∫–∏–π" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
    return;
  }
  
  try {
    const response = await fetch('/api/translations', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        russian,
        english: english || null,
        german: german || null,
        french: french || null,
        spanish: spanish || null,
        polish: polish || null,
        kazakh: kazakh || null,
        italian: italian || null,
        belarusian: belarusian || null,
        ukrainian: ukrainian || null,
        dutch: dutch || null,
        kyrgyz: kyrgyz || null,
        uzbek: uzbek || null,
        armenian: armenian || null
      })
    });
    
    if (response.ok) {
      clearForm();
      searchTranslations();
      alert('–ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
    } else {
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞');
  }
}

function clearForm() {
  document.querySelectorAll('input').forEach(input => {
    if (input.id !== 'searchInput') {
      input.value = '';
    }
  });
}

async function deleteTranslation(id) {
  if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–µ—Ä–µ–≤–æ–¥?')) {
    return;
  }
  
  try {
    const response = await fetch(`/api/translations/${id}`, {
      method: 'DELETE'
    });
    
    if (response.ok) {
      searchTranslations();
      alert('–ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
    } else {
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞');
  }
}

function escapeHtml(text) {
  if (!text) return '';
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
  searchTranslations();
});
